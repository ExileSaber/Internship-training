import matplotlib  # 画图的库，数据可视化，
import matplotlib.pyplot as plt  # as是取个别名，之后方便使用，之后plt.···都是使用的matplotlib.pyplot内置的方法
import numpy as np  # numpy数据处理库


# 设置matplotlib正常显示中文和负号，直接复制就行
matplotlib.rcParams['font.sans-serif'] = ['SimHei']   # 用黑体显示中文
matplotlib.rcParams['axes.unicode_minus'] = False     # 正常显示负号


def draw_line_chart(Time_list, keyword):  # 函数定义方法，参数不用设置类型
    '''

    :param Time_list: 一个列表，时间序列对应房价的列表，列表中的每个数据类型为字典
    :param keyword: 输入的地区名，字符串
    :return: 无返回值，最后画图
    '''

    Time = []  # 创建空列表
    Price = []
    for i in range(len(Time_list)):  # for循环，range()方法作用查，len(Time_list)获取Time_list列表长度
        K = Time_list[i].keys()  # keys()，字典类型数据操作方法，获取字典的键（字典是由‘键值对’组成的，‘键’：值）
        Key = list(K)  # keys()方法返回的类型是字典键这种特殊类型，这里用list()方法转换成list类型，便于使用索引操作
        time = Key[0].split('：')[-1]  # split()分割方法，这里是以'：'分割，分割后返回的是列表类型，Key[0]，还有最后的[-1]都是索引，-1指最后一个元素
        Time.append(time)  # append()是list列表类型的方法，作用是在列表尾添加元素。这里就是在Time这个列表后面添加元素time
        Price.append(Time_list[i][Key[0]])
        # 这个有点复杂，先清楚Time_list是时间序列对应房价的列表，列表中的每个数据类型为字典
        # Time_list[i]是取列表的第i+1个元素，要清楚这个元素是一个字典，字典元素通过键
        # 然后Time_list[i][Key[0]]，中的Key[0]是字典的键对应的列表的第一个元素（这里要真正的弄明白）
        # Time_list[i][Key[0]]这个整体对应的是含义是：取Time_list列表的第i个元素（是一个字典），再取字典的中Key[0]这个键对应的值（Key[0]是指Key列表的第一项）

    # 这部分不用看，没删的
    # space = x_y[1] - x_y[0]
    # min = x_y[0]
    # max = x_y[len(x_y)-1] + space

    t = []  # 创建空列表
    t.append(Time[0])  # 分成两步来看，先知道Time[0]是取的什么（首先知道Time是什么类型），然后知道append()的作用
    for i in range(1, len(Time)):  # range()方法传入两个参数，左闭右包
        # 由于时间序列区段较长，找了控制了一下要显示的东西
        if i % 13 == 12:  # if语句，%是求余操作（这一步貌似是由于之前做的时候数据有点不太齐，自己调整列表元素数据了的）
            t.append(Time[i])
        else:
            t.append('')

    plt.rcParams['figure.figsize'] = (24.0, 6.0)  # 这条语句直接复制改数就行，作用设置画图板大小
    fig, ax = plt.subplots()  # 一种创建画图板的方法，建立一个fig对象，建立一个axis对象，之后对ax进行操作，设置图表的横纵坐标

    fit = input("是否需要进行函数拟合：")  # python的输入方法input()，中间的字符串会先输出再屏幕上，再通过键盘输入对应的值
    if fit == "是":
        x = np.arange(len(Time))  # 由于np.arange类型是可以直接作为参数传给plt当x坐标
        y = Price  # y没数据类型要求，直接列表赋值就行

        z1 = np.polyfit(x, y, 8)  # polyfit用8次多项式拟合
        p1 = np.poly1d(z1)  # polyld获取拟合后的函数
        print(p1)  # 在屏幕上打印拟合多项式
        yvals = p1(x)  # 也可以使用yvals=np.polyval(z1,x)
        plot2 = plt.plot(x, yvals, 'r', label='拟合后的曲线')  # 绘制拟合的曲线，label参数是指的图例
    else:
        exit(-1)

    tick_positions = range(0, len(Time))  # 两部分看，len(Time)一部分，range()一部分
    ax.set_xticks(tick_positions)  # 设置x坐标刻度线及其间距
    ax.set_xticklabels(t, rotation=90)  # 设置x坐标个刻度线对应的数值
    plt.grid(axis='x', linestyle='-.')  # 设置绘制折线图的样式，axis是设置折线图每个点的样式，linestyle是设置折线的样式

    string = keyword + '房价时间分布'  # 字符串相加，合并为一个长字符串
    plt.plot(Price, label=string)  # 绘图，Price是每个点对应的数据，label是图例

    plt.legend()  # 将图例应用
    ax.set_ylabel('价格（元/平方米）')  # 设置y轴的说明
    ax.set_title(string)  # 设置x轴的说明

    if fit == '是':  # if语句判断，控制保存名称
        plt.savefig(string + '及函数拟合.jpg')  # plt.savefig()保存图像，是plt内置的方法
    else:
        plt.savefig(string + '.jpg')
    plt.show()


# 测试
# keyword = '北京'
# time_list = [{'北京:2017-08-06': 70132}, {'北京:2017-08-13': 72208}, {'北京:2017-08-20': 70189}, {'北京:2017-08-27': 69426}, {'北京:2017-09-03': 68848}, {'北京:2017-09-10': 70870}, {'北京:2017-09-17': 71234}, {'北京:2017-09-24': 71472}, {'北京:2017-10-01': 71274}, {'北京:2017-10-08': 70745}, {'北京:2017-10-15': 69900}, {'北京:2017-10-22': 67867}, {'北京:2017-10-29': 66534}, {'北京:2017-11-05': 65703}, {'北京:2017-11-12': 63807}, {'北京:2017-11-19': 63190}, {'北京:2017-11-26': 62087}, {'北京:2017-12-03': 60292}, {'北京:2017-12-10': 60319}, {'北京:2017-12-17': 58589}, {'北京:2017-12-24': 57852}, {'北京:2017-12-31': 57970}, {'北京:2018-01-07': 59739}, {'北京:2018-01-14': 59339}, {'北京:2018-01-21': 58501}, {'北京:2018-01-28': 60245}, {'北京:2018-02-04': 58550}, {'北京:2018-02-11': 60279}, {'北京:2018-02-18': 59911}, {'北京:2018-02-25': 59810}, {'北京:2018-03-04': 59697}, {'北京:2018-03-11': 59074}, {'北京:2018-03-18': 60807}, {'北京:2018-03-25': 61403}, {'北京:2018-04-01': 60786}, {'北京:2018-04-08': 59709}, {'北京:2018-04-15': 61446}, {'北京:2018-04-22': 61933}, {'北京:2018-04-29': 62060}, {'北京:2018-05-06': 60351}, {'北京:2018-05-13': 60027}, {'北京:2018-05-20': 58388}, {'北京:2018-05-27': 60077}, {'北京:2018-06-03': 60728}, {'北京:2018-06-10': 59084}, {'北京:2018-06-17': 60778}, {'北京:2018-06-24': 60572}, {'北京:2018-07-01': 58928}, {'北京:2018-07-08': 58990}, {'北京:2018-07-15': 60667}, {'北京:2018-07-22': 59678}, {'北京:2018-07-29': 58071}, {'北京:2018-08-05': 59726}, {'北京:2018-08-12': 59598}, {'北京:2018-08-19': 58006}, {'北京:2018-08-26': 57735}, {'北京:2018-09-02': 56191}, {'北京:2018-09-09': 57072}, {'北京:2018-09-16': 58669}, {'北京:2018-09-23': 57113}, {'北京:2018-09-30': 56912}, {'北京:2018-10-07': 55400}, {'北京:2018-10-14': 56137}, {'北京:2018-10-21': 55500}, {'北京:2018-10-28': 55094}, {'北京:2018-11-04': 54474}, {'北京:2018-11-11': 55234}, {'北京:2018-11-18': 53707}, {'北京:2018-11-25': 54695}, {'北京:2018-12-02': 53182}, {'北京:2018-12-09': 53771}, {'北京:2018-12-16': 55332}, {'北京:2018-12-23': 53813}, {'北京:2018-12-30': 54847}, {'北京:2019-01-06': 55253}, {'北京:2019-01-13': 55470}, {'北京:2019-01-20': 53923}, {'北京:2019-01-27': 54094}, {'北京:2019-02-03': 52587}, {'北京:2019-02-10': 52649}, {'北京:2019-02-17': 52595}, {'北京:2019-02-24': 52762}, {'北京:2019-03-03': 54331}, {'北京:2019-03-10': 53986}, {'北京:2019-03-17': 52459}, {'北京:2019-03-24': 52761}, {'北京:2019-03-31': 53606}, {'北京:2019-04-07': 53462}, {'北京:2019-04-14': 52589}, {'北京:2019-04-21': 52935}, {'北京:2019-04-28': 52952}, {'北京:2019-05-05': 52924}, {'北京:2019-05-12': 52877}, {'北京:2019-05-19': 53174}, {'北京:2019-05-26': 52606}, {'北京:2019-06-02': 52870}, {'北京:2019-06-09': 53639}, {'北京:2019-06-16': 53841}, {'北京:2019-06-23': 54791}, {'北京:2019-06-30': 54708}, {'北京:2019-07-07': 53131}, {'北京:2019-07-14': 52709}, {'北京:2019-07-21': 52706}, {'北京:2019-07-28': 52378}]
#
# if __name__ == '__main__':
#     draw_line_chart(time_list, keyword)
